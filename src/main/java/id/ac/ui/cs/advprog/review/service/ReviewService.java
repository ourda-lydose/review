package id.ac.ui.cs.advprog.review.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.server.ResponseStatusException;
import id.ac.ui.cs.advprog.review.dto.ReviewDTO;
import id.ac.ui.cs.advprog.review.model.Review;
import id.ac.ui.cs.advprog.review.model.PendingState;
import id.ac.ui.cs.advprog.review.repository.ReviewRepository;

import java.util.List;
import java.util.logging.Logger;

@Service
public class ReviewService {

    private static final Logger logger = Logger.getLogger(ReviewService.class.getName());


    private final RestTemplate restTemplate;
    private final ReviewRepository reviewRepository;
    @Value("${auth.service.base-url}")
    private String authServiceBaseUrl;

    @Autowired
    public ReviewService(RestTemplate restTemplate, ReviewRepository reviewRepository) {
        this.restTemplate = restTemplate;
        this.reviewRepository = reviewRepository;
    }

    public List<Review> getAllReviews() {
        return (List<Review>) reviewRepository.findAll();
    }

    public Review addReview(ReviewDTO reviewDTO, Integer userId) {
        Review review = new Review(); //id generated by db
        review.setBoxId(reviewDTO.getBoxId());
        review.setUserId(userId);
        review.setRating(reviewDTO.getRating());
        review.setReviewText(reviewDTO.getReviewText());
        review.setStatus(new PendingState(review));
        return reviewRepository.save(review);
    }


    public Review updateReview(Long reviewId, ReviewDTO reviewDTO, Integer userId) {
        Review existingReview = reviewRepository.findById(reviewId).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Review not found"));

        if (!existingReview.getUserId().equals(userId)) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "User is not the owner of the review");
        }

        existingReview.setRating(reviewDTO.getRating());
        existingReview.setReviewText(reviewDTO.getReviewText());
        return reviewRepository.save(existingReview);
    }

    public void deleteReview(Long reviewId, Integer userId) {
//        int userId = getAuthenticatedUserId(token);

        Review existingReview = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Review not found"));

        if (!existingReview.getUserId().equals(userId)) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "User is not the owner of the review");
        }
        reviewRepository.delete(existingReview);
    }

//    public Integer getAuthenticatedUserId(String token) {
//        logger.info("ini token: " + token);
//        HttpHeaders headers = new HttpHeaders();
//        headers.setBearerAuth(token);
//        HttpEntity<String> entity = new HttpEntity<>(headers);
//
//        ResponseEntity<User> response = restTemplate.exchange(
//                authServiceBaseUrl + "/users/me",
//                HttpMethod.GET,
//                entity,
//                User.class);
//
//        if (response.getStatusCode() == HttpStatus.OK) {
//            return response.getBody().getId();
//        } else {
//            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "User is not authenticated");
//        }
//    }

    public Integer getAuthenticatedUserId(String token) {
        logger.info("ini token: " + token);
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                authServiceBaseUrl + "/users/me",
                HttpMethod.GET,
                entity,
                String.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            String responseBody = response.getBody();
            try {
                // Parse the JSON response to extract the user ID
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode jsonNode = objectMapper.readTree(responseBody);
                return jsonNode.get("id").asInt();
            } catch (Exception e) {
                throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error parsing JSON response", e);
            }
        } else {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "User is not authenticated");
        }
    }

    public List<Review> getReviewsByUserId(Long userId) {
        return reviewRepository.findByUserId(userId);
    }
}
